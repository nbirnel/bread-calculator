#!/usr/bin/env ruby

require 'bread_calculator'
#require  "#{File.dirname(__FILE__)}/../lib/bread_calculator"

def help status=true
  puts <<EOF
NAME
  bread-calc
SYNOPSIS
  bread-calc [OPTIONS] FILE
DESCRIPTION
  bread-calc parses a nearly free-form bread recipe in file FILE. By default
  the canonical representation of the recipe is printed to standard out.
  Optionally, the weight, or bakers percentage formula can be generated, or the
  recipe can by scaled up or down.
OPTIONS:
  --help 
    print this help
  --summary
    print a baker's percentage summary
  --weight
    print the weight
  --scale-by FACTOR
    regenerate the recipe, scaling up or down by FACTOR
FORMATS
  The recipe format consists of a metadata prelude, and steps.

  In prelude lines, anything before a colon is considered to be the name of a
  metadata field; anything after the colon is a value to populate. Lines
  without colons are continuations of the 'notes' field. It is suggested to 
  have at least a 'name' field.
  
  A line starting with a hyphen ends the prelude and starts the first step. 

  Each step is delimited by one or more blank lines.

  Any line in a step starting with a space or a blank is an ingredient,
  consisting of quantity, units, and the ingredient itself. bread-calc will
  attempt to guess at the type of ingredient, but you can always force it by
  including one of the words 'flour', 'liquid', or 'additive' in the line.
BUGS
  It is cheerfully assumed that all units are grams.

  Output is rather ugly.

  It is undefined how 'liquid flour additive' is parsed, but don't expect 
  anything good.
EOF
  
  exit status

end

@get = 'r'
@help = nil

loop { case ARGV[0]
  when /--help/     then             @help = 'help'     ;  ARGV.shift; break
  when /--summary/  then             @get  = 'r.summary';  ARGV.shift
  when /--weight/   then             @get  = 'r.weight';   ARGV.shift
    #.to_f protects against 'no .<digit> floating literal anymore' for .33
  when /--scale-by/ then ARGV.shift; @get  = "r.scale_by #{ARGV.shift.to_f}"
  when /--/ then ARGV.shift; break
  when /^-/ then help 1
  else break
end; }

help if @help

ARGV.each do |arg|
  parser = BreadCalculator::Parser.new
  r = parser.parse(arg)
  puts eval("#{@get}")
end
